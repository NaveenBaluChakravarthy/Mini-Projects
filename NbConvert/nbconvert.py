# -*- coding: utf-8 -*-
"""NbConvert.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14AUfky-vQ6Reob03XO8QBwzdW3YhO8kg
"""

"""
Name     : NbConvert
Function : Converts ipynb to html
Author   : Naveen Chakravarthy Balasubramanian
Date     : 2021-07-24
"""


class NbConvert():
    def __init__(self, filepath):
        """
        Get the notebook data and open it as a text file. 
        """
        fileobj = open(filepath, mode = 'r')
        data = fileobj.readlines()
        data = data[0].replace('null', 'None')
        self.notebook = eval(data)

    def get_name(self):
        """
        Get the name of the notebook.
        """
        return self.notebook['metadata']['colab']['name'][:-6]

    def init_html(self):
        """
        Initialize the html document with styles and skeletal structure. 
        """        
        self.html = open(f'{C_Root}/{self.get_name()}.html', mode = 'w')
        self.html.write('<!doctype html>\n')
        self.html.write('<html>\n')
        self.html.write('<head>\n')
        self.html.write(f'<title>{self.get_name()}</title>\n')
        self.html.write('<meta charset="UTF-8">\n')
        self.html.write('<meta name="viewport" content="width=device-width, initial-scale=1">\n')
        self.html.write('<style>\n')
        self.html.write('h1{font-size:36px}h2{font-size:30px}h3{font-size:24px}h4{font-size:20px}h5{font-size:18px}h6{font-size:16px}p{font-size:18px}')
        self.html.write('h1,h2,h3,h4,h5,h6,p{font-family:"Segoe UI",Arial,sans-serif;font-weight:400;margin:10px 0}')
        self.html.write('.bg-body{color:#FFFFFF!important;background-color:#0F0F0F!important;position: relative; left: 30px}')
        self.html.write('#code {border-radius: 10px; background: #708090; width: 1000px}')
        self.html.write('#output {border-radius: 10px; background: #FFFFFF; width: 1000px}')
        self.html.write('</style>\n')
        self.html.write('</head>\n')
        self.html.write('<body class = "bg-body">\n')

    def finish(self):
        """
        Finish the html document by terminating the body and html tags.
        """
        self.html.write('</body>\n')
        self.html.write('</html>')
        self.html.close()

    def create_code(self, contents, content_type):
        """
        Format code cell and output.
        """
        contents = contents.replace('\n', '<br>&emsp;')
        if content_type == 'code':
            contents = contents.replace('    ', '&emsp;')
            self.html.write(f'<p id = "code"><br>&emsp;{contents}<br><br></p>\n<br>\n')
        elif content_type == 'output':
            contents = contents.replace('    ', '&emsp;')
            self.html.write(f'<p id = "output"><br>&emsp;{contents}<br></p>\n<br>\n')

    def create_para(self, contents):
        """
        Format markdown cells.
        """
        contents = contents.replace('\n', '<br>&emsp;')
        self.html.write(f'<p>&emsp;{contents}</p>\n<br>\n')

    def create_header(self, contents, headertype):
        """
        Format markdown headers. 
        """
        contents = contents.split('\n')
        while contents[0][0] == '#' or contents[0][0] == ' ':
            contents[0] = contents[0][1:]
        self.html.write(f'<h{str(headertype)}>{contents[0]}</h{str(headertype)}>\n<br>\n')
        if len(contents) > 1:
            for line in contents[1:]:
                line = line.replace('\n', '<br>')
                self.create_para(contents = line)

    def convert(self):
        """
        Identify cell type and take appropriate action.
        """
        self.init_html()
        for cell in self.notebook['cells']:
            if cell['cell_type'] == 'code':
                source = ''.join(cell['source'])
                self.create_code(contents = source, content_type = 'code')
                output = cell['outputs'][0]
                output = ''.join(output['text'])
                self.create_code(contents = output, content_type = 'code') 
            elif cell['cell_type'] == 'markdown':
                source = ''.join(cell['source'])
                if source[0:6] == '######':
                    self.create_header(contents = source, headertype = 6)
                elif source[0:5] == '#####' and source[5] != '#':
                    self.create_header(contents = source, headertype = 5)
                elif source[0:4] == '####' and source[4] != '#':
                    self.create_header(contents = source, headertype = 4)
                elif source[0:3] == '###' and source[3] != '#':
                    self.create_header(contents = source, headertype = 3)
                elif source[0:2] == '##' and source[2] != '#':
                    self.create_header(contents = source, headertype = 2)
                elif source[0:1] == '#' and source[1] != '#':
                    self.create_header(contents = source, headertype = 1)
                else:
                    self.create_para(contents = source)
            else:
                print('Invalid cell')
        self.finish()

# Driver
C_Root = '/content/drive/MyDrive/Projects/NbConvert'
C_Notebook = f'{C_Root}/Test.ipynb'
converter = NbConvert(C_Notebook)
converter.convert()
from google.colab import files
files.download(f'{C_Root}/{converter.get_name()}.html')